""" 8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un n√∫mero entero 
positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero.
Ejemplos:
contar_digito(12233421, 2) ‚Üí 3
contar_digito(5555, 5) ‚Üí 4
contar_digito(123456, 7) ‚Üí 0 """

""" st = "236"
print(st[0:-1]) """
    
def contar_digito(numero, digito):
    if len(str(numero)) == 1:
        if numero == digito:
            return 1 # probe tambien devolver un array con dos valores [numero, 1] pero no me deja acceder
        else:
            return 0
    else:
        return contar_digito(numero // 10, digito) +1   # se que tengo que sumar lo que retorna y que tengo que recuperar el numero
         

print(contar_digito(236, 2))

def contar_digitow(numero, digito):
    numero = str(numero)
    digito = str(digito)

    if len(numero) == 1:
        if numero == digito:
            return 1
        else:
            return 0
    else:
        fn = contar_digitow(numero[0:-1], digito) # se que tengo que sumar lo que retorna y que tengo que recuperar el numero
        return fn
          

""" print(contar_digitow(236, 2)) """

""" 1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa
funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros
entre 1 y el n√∫mero que indique el usuario """

def calcular_factorial(num):
    if num == 0:
        return 1
    else:
        return num * calcular_factorial(num-1)
    
numero = int(input("Ingrese un numero entero positivo para calcular su factorial: "))
print(f"El factorial de {numero} es {calcular_factorial(numero)}")
""" 2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n 
indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique. """

def fibonacci(num):
    if num == 0:
        return 0
    elif num == 1:
        return 1
    else:
        return fibonacci(num-1) + fibonacci(num-2)
posicion = int(input("Ingrese un la posicion de fibonacci deseada: "))
print(f"La posicion {posicion} en sistema fibonacci equivale al numero {fibonacci(posicion)}")

""" 3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, 
utilizando la f√≥rmula ùëõùëö= ùëõ‚àóùëõ(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general. """

def potenciar_numero(n, m):
    if m == 1:
        return n
    else:
        return n * potenciar_numero(n,m-1)

base = int(input("Ingrese el valor base que desea potenciar: "))
potencia = int(input("Ingrese el valor de la potencia: "))

print(f"{potenciar_numero(base,potencia)}")

""" 4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal 
y devuelva su representaci√≥n en binario como una cadena de texto. """

def decimal_binario2(num):
    if num < 2:
        return str(num % 2)
    else:
        fact = decimal_binario2(num // 2) + str(num %2)
        return fact

print(decimal_binario2(29))

""" 5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de texto sin espacios ni tildes, 
y devuelva True si es un pal√≠ndromo o False si no lo es.
Requisitos:
La soluci√≥n debe ser recursiva.
No se debe usar [::-1] ni la funci√≥n reversed(). """

def es_palindromo(string):
    
    if len(string) == 1:
        return True
    elif len(string) == 2:
        return string[0] == string[-1:]
    else:
        return es_palindromo(string[1:-1])

print(es_palindromo("menem"))

""" 6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero positivo y
devuelva la suma de todos sus d√≠gitos.
Restricciones:
No se puede convertir el n√∫mero a string.
Us√° operaciones matem√°ticas (%, //) y recursi√≥n.
Ejemplos:
suma_digitos(1234) ‚Üí 10 (1 + 2 + 3 + 4)
suma_digitos(9) ‚Üí 9
suma_digitos(305) ‚Üí 8 (3 + 0 + 5) """

def suma_digitos(num):
    if num <= 9:
        return num
    else:
        return suma_digitos(num // 10) + (num - num // 10 * 10)

print(suma_digitos(1234))
print(suma_digitos(9))
print(suma_digitos(305))

""" 7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n bloques, en el siguiente nivel 
uno menos (n - 1), y as√≠ sucesivamente hasta llegar al √∫ltimo nivel con un solo bloque.
Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el nivel m√°s bajo y devuelva el total 
de bloques que necesita para construir toda la pir√°mide.
Ejemplos:
contar_bloques(1) ‚Üí 1 (1)
contar_bloques(2) ‚Üí 3 (2 + 1)
contar_bloques(4) ‚Üí 10 (4 + 3 + 2 + 1) """

def contar_bloques(n):
    if n == 1:
        return n
    else:
        return contar_bloques(n-1) + n
    
print(contar_bloques(1))
print(contar_bloques(2))
print(contar_bloques(4))